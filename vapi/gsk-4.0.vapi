/* gsk-4.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gsk", gir_namespace = "Gsk", gir_version = "4.0", lower_case_cprefix = "gsk_")]
namespace Gsk {
	[CCode (cheader_filename = "gsk/gsk.h", get_value_function = "gsk_value_get_render_node", ref_function = "gsk_render_node_ref", set_value_function = "gsk_value_set_render_node", take_value_function = "gsk_value_take_render_node", type_id = "gsk_render_node_get_type ()", unref_function = "gsk_render_node_unref")]
	[Version (since = "3.90")]
	public class RenderNode {
		[CCode (has_construct_function = false)]
		protected RenderNode ();
		public unowned Gsk.RenderNode append_child (Gsk.RenderNode child);
		public bool contains (Gsk.RenderNode descendant);
		public Cairo.Context get_draw_context ();
		public unowned Gsk.RenderNode get_first_child ();
		public unowned Gsk.RenderNode get_last_child ();
		public uint get_n_children ();
		public unowned Gsk.RenderNode get_next_sibling ();
		public unowned Gsk.RenderNode get_parent ();
		public unowned Gsk.RenderNode get_previous_sibling ();
		public unowned Gsk.RenderNode insert_child_after (Gsk.RenderNode child, Gsk.RenderNode? sibling);
		public unowned Gsk.RenderNode insert_child_at_pos (Gsk.RenderNode child, int index_);
		public unowned Gsk.RenderNode insert_child_before (Gsk.RenderNode child, Gsk.RenderNode? sibling);
		public bool is_hidden ();
		public bool is_opaque ();
		public unowned Gsk.RenderNode prepend_child (Gsk.RenderNode child);
		public unowned Gsk.RenderNode @ref ();
		public unowned Gsk.RenderNode remove_all_children ();
		public unowned Gsk.RenderNode remove_child (Gsk.RenderNode child);
		public unowned Gsk.RenderNode replace_child (Gsk.RenderNode new_child, Gsk.RenderNode old_child);
		public void set_anchor_point (Graphene.Point3D offset);
		public void set_blend_mode (Gsk.BlendMode blend_mode);
		public void set_bounds (Graphene.Rect? bounds);
		public void set_hidden (bool hidden);
		public void set_name (string? name);
		public void set_opacity (double opacity);
		public void set_opaque (bool opaque);
		public void set_scaling_filter (Gsk.ScalingFilter min_filter, Gsk.ScalingFilter mag_filter);
		public void set_texture (int texture_id);
		public void set_transform (Graphene.Matrix? transform);
		public void unref ();
	}
	[CCode (cheader_filename = "gsk/gsk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gsk_render_node_iter_get_type ()")]
	[Compact]
	public class RenderNodeIter {
		[CCode (has_construct_function = false)]
		[Version (since = "3.90")]
		public RenderNodeIter ();
		[DestroysInstance]
		[Version (since = "3.90")]
		public void free ();
		[Version (since = "3.90")]
		public void init (Gsk.RenderNode node);
		[Version (since = "3.90")]
		public bool is_valid ();
		[Version (since = "3.90")]
		public bool next (out unowned Gsk.RenderNode child);
		[Version (since = "3.90")]
		public bool prev (out unowned Gsk.RenderNode child);
		[Version (since = "3.90")]
		public void remove ();
	}
	[CCode (cheader_filename = "gsk/gsk.h", type_id = "gsk_renderer_get_type ()")]
	public abstract class Renderer : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Renderer ();
		[Version (since = "3.90")]
		public Gsk.Renderer create_fallback (Graphene.Rect viewport, Cairo.Context cr);
		[Version (since = "3.90")]
		public Gsk.RenderNode create_render_node ();
		[Version (since = "3.90")]
		public unowned Gdk.Display get_display ();
		[Version (since = "3.90")]
		public static Gsk.Renderer? get_for_display (Gdk.Display display);
		[Version (since = "3.90")]
		public int get_scale_factor ();
		[Version (since = "3.90")]
		public Graphene.Rect get_viewport ();
		[Version (since = "3.90")]
		public unowned Gdk.Window? get_window ();
		[Version (since = "3.90")]
		public bool realize ();
		[Version (since = "3.90")]
		public void render (Gsk.RenderNode root, Gdk.DrawingContext context);
		[Version (since = "3.90")]
		public void set_scale_factor (int scale_factor);
		[Version (since = "3.90")]
		public void set_viewport (Graphene.Rect? viewport);
		[Version (since = "3.90")]
		public void set_window (Gdk.Window window);
		[Version (since = "3.90")]
		public void unrealize ();
		[Version (since = "3.90")]
		public Gdk.Display display { get; construct; }
		[NoAccessorMethod]
		[Version (since = "3.90")]
		public Gdk.DrawingContext drawing_context { owned get; }
		[Version (since = "3.90")]
		public int scale_factor { get; set; }
		[Version (since = "3.90")]
		public Graphene.Rect viewport { get; set; }
		public Gdk.Window window { get; construct; }
	}
	[CCode (cheader_filename = "gsk/gsk.h", cprefix = "GSK_BLEND_MODE_", has_type_id = false)]
	[Version (since = "3.90")]
	public enum BlendMode {
		DEFAULT,
		MULTIPLY,
		SCREEN,
		OVERLAY,
		DARKEN,
		LIGHTEN,
		COLOR_DODGE,
		COLOR_BURN,
		HARD_LIGHT,
		SOFT_LIGHT,
		DIFFERENCE,
		EXCLUSION
	}
	[CCode (cheader_filename = "gsk/gsk.h", cprefix = "GSK_SCALING_FILTER_", has_type_id = false)]
	[Version (since = "3.90")]
	public enum ScalingFilter {
		LINEAR,
		NEAREST,
		TRILINEAR
	}
}
