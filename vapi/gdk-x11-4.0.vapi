/* gdk-x11-4.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gdk", gir_namespace = "GdkX11", gir_version = "4.0", lower_case_cprefix = "gdk_")]
namespace Gdk {
	namespace X11 {
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_app_launch_context_get_type ()")]
		[GIR (name = "X11AppLaunchContext")]
		public class AppLaunchContext : Gdk.AppLaunchContext {
			[CCode (has_construct_function = false)]
			protected AppLaunchContext ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_cursor_get_type ()")]
		[GIR (name = "X11Cursor")]
		public class Cursor : Gdk.Cursor {
			[CCode (has_construct_function = false)]
			protected Cursor ();
			public X.Cursor get_xcursor ();
			public unowned X.Display get_xdisplay ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_device_core_get_type ()")]
		[GIR (name = "X11DeviceCore")]
		public class DeviceCore : Gdk.Device {
			[CCode (has_construct_function = false)]
			protected DeviceCore ();
			[CCode (cname = "gdk_x11_device_manager_lookup")]
			[Version (since = "3.2")]
			public static unowned Gdk.X11.DeviceCore? lookup_for_device_manager (Gdk.X11.DeviceManagerCore device_manager, int device_id);
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_device_manager_core_get_type ()")]
		[GIR (name = "X11DeviceManagerCore")]
		public class DeviceManagerCore : Gdk.DeviceManager {
			[CCode (has_construct_function = false)]
			protected DeviceManagerCore ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_device_manager_xi2_get_type ()")]
		[GIR (name = "X11DeviceManagerXI2")]
		public class DeviceManagerXI2 : Gdk.X11.DeviceManagerCore {
			[CCode (has_construct_function = false)]
			protected DeviceManagerXI2 ();
			[NoAccessorMethod]
			public int major { get; construct; }
			[NoAccessorMethod]
			public int minor { get; construct; }
			[NoAccessorMethod]
			public int opcode { get; construct; }
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_device_xi2_get_type ()")]
		[GIR (name = "X11DeviceXI2")]
		public class DeviceXI2 : Gdk.Device {
			[CCode (has_construct_function = false)]
			protected DeviceXI2 ();
			[NoAccessorMethod]
			public int device_id { get; construct; }
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_display_get_type ()")]
		[GIR (name = "X11Display")]
		public class Display : Gdk.Display {
			[CCode (has_construct_function = false)]
			protected Display ();
			[Version (since = "2.12")]
			public void broadcast_startup_message (string message_type, ...);
			[Version (since = "3.0")]
			public int error_trap_pop ();
			[Version (since = "3.0")]
			public void error_trap_pop_ignored ();
			[Version (since = "3.0")]
			public void error_trap_push ();
			[Version (since = "2.12")]
			public unowned string get_startup_notification_id ();
			[Version (since = "2.8")]
			public uint32 get_user_time ();
			[Version (since = "2.2")]
			public unowned X.Display get_xdisplay ();
			[Version (since = "2.2")]
			public void grab ();
			[CCode (cname = "gdk_x11_lookup_xdisplay")]
			[Version (since = "2.2")]
			public static unowned Gdk.X11.Display lookup_for_xdisplay (X.Display xdisplay);
			[Version (since = "2.8")]
			public void set_cursor_theme (string theme, int size);
			[Version (since = "3.0")]
			public void set_startup_notification_id (string startup_id);
			[Version (since = "3.10")]
			public void set_window_scale (int scale);
			[Version (since = "2.24")]
			public int string_to_compound_text (string str, out Gdk.Atom encoding, out int format, [CCode (array_length_cname = "length", array_length_pos = 4.1)] out uint8[] ctext);
			[Version (since = "2.24")]
			public int text_property_to_text_list (Gdk.Atom encoding, int format, uint8 text, int length, string list);
			[Version (since = "2.2")]
			public void ungrab ();
			[Version (since = "2.24")]
			public bool utf8_to_compound_text (string str, out Gdk.Atom encoding, out int format, [CCode (array_length_cname = "length", array_length_pos = 4.1)] out uint8[] ctext);
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_display_manager_get_type ()")]
		[GIR (name = "X11DisplayManager")]
		public class DisplayManager : Gdk.DisplayManager {
			[CCode (has_construct_function = false)]
			protected DisplayManager ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_drag_context_get_type ()")]
		[GIR (name = "X11DragContext")]
		public class DragContext : Gdk.DragContext {
			[CCode (has_construct_function = false)]
			protected DragContext ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_keymap_get_type ()")]
		[GIR (name = "X11Keymap")]
		public class Keymap : Gdk.Keymap {
			[CCode (has_construct_function = false)]
			protected Keymap ();
			[Version (since = "3.6")]
			public int get_group_for_state (uint state);
			[Version (since = "3.6")]
			public bool key_is_modifier (uint keycode);
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_screen_get_type ()")]
		[GIR (name = "X11Screen")]
		public class Screen : Gdk.Screen {
			[CCode (has_construct_function = false)]
			protected Screen ();
			[Version (since = "3.10")]
			public uint32 get_current_desktop ();
			[Version (since = "2.14")]
			public X.ID get_monitor_output (int monitor_num);
			[Version (since = "3.10")]
			public uint32 get_number_of_desktops ();
			[Version (since = "2.2")]
			public int get_screen_number ();
			[Version (since = "2.2")]
			public unowned string get_window_manager_name ();
			[Version (since = "2.2")]
			public unowned X.Screen get_xscreen ();
			[Version (since = "2.2")]
			public unowned Gdk.X11.Visual lookup_visual (X.VisualID xvisualid);
			[Version (since = "2.2")]
			public bool supports_net_wm_hint (Gdk.Atom property);
			public signal void window_manager_changed ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_visual_get_type ()")]
		[GIR (name = "X11Visual")]
		public class Visual : Gdk.Visual {
			[CCode (has_construct_function = false)]
			protected Visual ();
			public unowned X.Visual get_xvisual ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_window_get_type ()")]
		[GIR (name = "X11Window")]
		public class Window : Gdk.Window {
			[CCode (has_construct_function = false)]
			protected Window ();
			[CCode (cname = "gdk_x11_window_foreign_new_for_display", has_construct_function = false, type = "GdkWindow*")]
			[Version (since = "2.24")]
			public Window.foreign_for_display (Gdk.X11.Display display, X.Window window);
			[Version (since = "3.10")]
			public uint32 get_desktop ();
			public X.Window get_xid ();
			[Version (since = "2.24")]
			public static unowned Gdk.X11.Window lookup_for_display (Gdk.X11.Display display, X.Window window);
			[Version (since = "2.8")]
			public void move_to_current_desktop ();
			[Version (since = "3.10")]
			public void move_to_desktop (uint32 desktop);
			[Version (deprecated = true, deprecated_since = "3.12", since = "3.10")]
			public void set_frame_extents (int left, int right, int top, int bottom);
			[Version (since = "3.8")]
			public void set_frame_sync_enabled (bool frame_sync_enabled);
			[Version (since = "3.4")]
			public void set_hide_titlebar_when_maximized (bool hide_titlebar_when_maximized);
			[Version (since = "3.2")]
			public void set_theme_variant (string variant);
			[Version (since = "2.6")]
			public void set_user_time (uint32 timestamp);
			[Version (since = "3.4")]
			public void set_utf8_property (string name, string? value);
		}
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static X.Atom atom_to_xatom (Gdk.Atom atom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.2")]
		public static X.Atom atom_to_xatom_for_display (Gdk.X11.Display display, Gdk.Atom atom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "3.2")]
		public static int device_get_id (Gdk.X11.DeviceCore device);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.24")]
		public static void free_compound_text ([CCode (array_length = false, type = "guchar*")] uint8[] ctext);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.24")]
		public static void free_text_list (string list);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static X.Window get_default_root_xwindow ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static int get_default_screen ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static unowned X.Display get_default_xdisplay ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static uint32 get_server_time (Gdk.X11.Window window);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static X.Atom get_xatom_by_name (string atom_name);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.2")]
		public static X.Atom get_xatom_by_name_for_display (Gdk.X11.Display display, string atom_name);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static unowned string get_xatom_name (X.Atom xatom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.2")]
		public static unowned string get_xatom_name_for_display (Gdk.X11.Display display, X.Atom xatom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static void grab_server ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.4")]
		public static void register_standard_event_type (Gdk.X11.Display display, int event_base, int n_events);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.24")]
		public static void set_sm_client_id (string sm_client_id);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static void ungrab_server ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static Gdk.Atom xatom_to_atom (X.Atom xatom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.2")]
		public static Gdk.Atom xatom_to_atom_for_display (Gdk.X11.Display display, X.Atom xatom);
	}
}
